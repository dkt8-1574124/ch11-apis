df97 <- filter(vehicles, year == 1997)
df97
# Arrange the 1997 cars by highway (`hwy`) gas milage
sorted_df97 <- arrange(vehicles, hwy)
sorted_df97
view(sorted_df97)
View(sorted_df97)
# Mutate the 1997 cars data frame to add a column `average` that has the average
# gas milage (between city and highway mpg) for each car
new_df97 <- mutate(vehicles,
average = (cty + hwy)/2
)
new_df97
lintr:::addin_lint()
library(nycflights13)
library(dplyr)
dim(flights)
# The data frame `flights` should now be accessible to you.
# Use functions to inspect it: how many rows and columns does it have?
# What are the names of the columns?
# Use `??flights` to search for documentation on the data set (for what the
# columns represent)
dim(flights)
#print(paste(nrow(flights), "rows"))
#print(paste(ncol(flights), "columns"))
colnames(flights)
View(flights)
# Use `dplyr` to give the data frame a new column that is the amount of time
# gained or lost while flying (that is: how much of the delay arriving occured
# during flight, as opposed to before departing).
flights <- mutate(flights, change = arr_delay - dep_delay)
View(flights)
# Use `dplyr` to sort your data frame in descending order by the column you just
# created. Remember to save this as a variable (or in the same one!)
flights <- arrange(flights, -change)
View(flights)
# For practice, repeat the last 2 steps in a single statement using the pipe
# operator. You can clear your environmental variables to "reset" the data frame
flights <- mutate(flights, change = arr_delay - dep_delay) %>%
arrange(desc(change))
# For practice, repeat the last 2 steps in a single statement using the pipe
# operator. You can clear your environmental variables to "reset" the data frame
flights <- mutate(flights, change = arr_delay - dep_delay) %>%
arrange(desc(change))
View(head(flights))
# Make a histogram of the amount of time gained using the `hist()` function
hist(flights)
# Make a histogram of the amount of time gained using the `hist()` function
hist(flights$change)
# On average, did flights gain or lose time?
# Note: use the `na.rm = TRUE` argument to remove NA values from your aggregation
summarise(flights, average = mean(flights$change))
# On average, did flights gain or lose time?
# Note: use the `na.rm = TRUE` argument to remove NA values from your aggregation
summarise(flights, average = mean(flights$change), na.rm = TRUE)
# On average, did flights gain or lose time?
# Note: use the `na.rm = TRUE` argument to remove NA values from your aggregation
# WRONG summarise(flights, average = mean(flights$change), na.rm = TRUE)
mean(flights$change, na.rm = TRUE)
# Create a data.frame of flights headed to SeaTac ('SEA'), only including the
# origin, destination, and the "gain_in_air" column you just created
df_SEA <- filter(flights, dest = "SEA")
# Create a data.frame of flights headed to SeaTac ('SEA'), only including the
# origin, destination, and the "gain_in_air" column you just created
df_SEA <- filter(flights, dest == "SEA")
View(df_SEA)
# Create a data.frame of flights headed to SeaTac ('SEA'), only including the
# origin, destination, and the "gain_in_air" column you just created
df_SEA <- filter(flights, dest == "SEA") >%>
select(origin, dest, change)
# Create a data.frame of flights headed to SeaTac ('SEA'), only including the
# origin, destination, and the "gain_in_air" column you just created
df_SEA <- filter(flights, dest == "SEA") %>%
select(origin, dest, change)
View(df_SEA)
# On average, did flights to SeaTac gain or loose time?
mean(df_SEA$change, na.rm = TRUE)
# Consider flights from JFK to SEA. What was the average, min, and max air time
# of those flights? Bonus: use pipes to answer this question in one statement
# (without showing any other data)!
summarise(flights, origin == "JFK") %>%
filter(dest == "SEA") %>%
select(average == mean(flights$change),
min == min(flights$change),
max == max(flights$change))
# Consider flights from JFK to SEA. What was the average, min, and max air time
# of those flights? Bonus: use pipes to answer this question in one statement
# (without showing any other data)!
#summarise(flights, origin == "JFK") %>%
#filter(dest == "SEA") %>%
#select(average == mean(flights$change),
#       min == min(flights$change),
#       max == max(flights$change))
filter(flights, origin == "JFK" & dest == "SEA")
# Consider flights from JFK to SEA. What was the average, min, and max air time
# of those flights? Bonus: use pipes to answer this question in one statement
# (without showing any other data)!
#summarise(flights, origin == "JFK") %>%
#filter(dest == "SEA") %>%
#select(average == mean(flights$change),
#       min == min(flights$change),
#       max == max(flights$change))
filter(flights, origin == "JFK" & dest == "SEA") %>%
summarise(
average = mean(flights$change),
min = min(flights$air_time),
max = max(flights$air_time)
)
# Consider flights from JFK to SEA. What was the average, min, and max air time
# of those flights? Bonus: use pipes to answer this question in one statement
# (without showing any other data)!
#summarise(flights, origin == "JFK") %>%
#filter(dest == "SEA") %>%
#select(average == mean(flights$change),
#       min == min(flights$change),
#       max == max(flights$change))
filter(flights, origin == "JFK" , dest == "SEA") %>%
summarise(
average = mean(flights$change),
min = min(flights$air_time),
max = max(flights$air_time)
)
# Consider flights from JFK to SEA. What was the average, min, and max air time
# of those flights? Bonus: use pipes to answer this question in one statement
# (without showing any other data)!
#summarise(flights, origin == "JFK") %>%
#filter(dest == "SEA") %>%
#select(average == mean(flights$change),
#       min == min(flights$change),
#       max == max(flights$change))
filter(flights, origin == "JFK" , dest == "SEA") %>%
summarise(
average = mean(flights$change, na.rm = TRUE)
min = min(flights$air_time, na.rm = TRUE),
max = max(flights$air_time, na.rm = TRUE)
)
# Consider flights from JFK to SEA. What was the average, min, and max air time
# of those flights? Bonus: use pipes to answer this question in one statement
# (without showing any other data)!
#summarise(flights, origin == "JFK") %>%
#filter(dest == "SEA") %>%
#select(average == mean(flights$change),
#       min == min(flights$change),
#       max == max(flights$change))
filter(flights, origin == "JFK" , dest == "SEA") %>%
summarise(
average = mean(flights$change, na.rm = TRUE),
min = min(flights$air_time, na.rm = TRUE),
max = max(flights$air_time, na.rm = TRUE)
)
# Install the `nycflights13` package. Load (`library()`) the package.
# You'll also need to load `dplyr`
#install.packages("nycflights13")  # should be done already
library(nycflights13)
# What was the average departure delay in each month?
# Save this as a data frame `dep_delay_by_month`
# Hint: you'll have to perform a grouping operation then summarizing your data
View(flights)
# What was the average departure delay in each month?
# Save this as a data frame `dep_delay_by_month`
# Hint: you'll have to perform a grouping operation then summarizing your data
dep_delay_by_month <- group_by(flights, month)
View(dep_delay_by_month)
# What was the average departure delay in each month?
# Save this as a data frame `dep_delay_by_month`
# Hint: you'll have to perform a grouping operation then summarizing your data
dep_delay_by_month <- group_by(flights, month) %>%
summarise(average = mean(change))
# What was the average departure delay in each month?
# Save this as a data frame `dep_delay_by_month`
# Hint: you'll have to perform a grouping operation then summarizing your data
dep_delay_by_month <- group_by(flights, month) %>%
summarise(average = mean(dep_delay))
View(dep_delay_by_month)
# What was the average departure delay in each month?
# Save this as a data frame `dep_delay_by_month`
# Hint: you'll have to perform a grouping operation then summarizing your data
dep_delay_by_month <- group_by(flights, month) %>%
summarise(average = mean(dep_delay, na.rm = TRUE))
View(dep_delay_by_month)
# Which month had the greatest average departure delay?
filter(dep_delay_by_month, dep_delay = max(dep_delay))
# Which month had the greatest average departure delay?
filter(dep_delay_by_month, dep_delay == max(dep_delay))
# Which month had the greatest average departure delay?
filter(dep_delay_by_month, dep_delay == max(average))
# Which month had the greatest average departure delay?
filter(dep_delay_by_month, average == max(average))
# Which month had the greatest average departure delay?
filter(dep_delay_by_month, average == max(average)) %>%
select(month)
# If your above data frame contains just two columns (e.g., "month", and "delay" in that order), you can create
# a scatterplot by passing that data frame to the 'plot()' function
plot(dep_delay_by_month)
View(airports)
# To which destinations were the average arrival delays the highest?
# Hint: you'll have to perform a grouping operation then summarize your data
# You can use the `head()` function to view just the first few rows
group_by(flights, dest) %>%
summarise(avg_delay = mean(dep_delay, na.rm = TRUE)) %>%
filter(avg_delay == max(avg_delay)) %>%
select(dest)
group_by(flights, dest)
group_by(flights, dest) %>%
summarise(avg_delay = mean(dep_delay, na.rm = TRUE)) %>%
group_by(flights, dest) %>%
summarise(avg_delay = mean(dep_delay, na.rm = TRUE))
group_by(flights, dest) %>%
group_by(flights, dest)
group_by(flights, dest)
group_by(flights, dest) %>%
summarise(avg_delay = mean(dep_delay, na.rm = TRUE))
group_by(flights, dest) %>%
summarise(avg_delay = mean(dep_delay, na.rm = TRUE)) %>%
filter(avg_delay == max(avg_delay))
group_by(flights, dest) %>%
summarise(avg_delay = mean(dep_delay, na.rm = TRUE)) %>%
filter(avg_delay == max(avg_delay))
group_by(flights, dest) %>%
summarise(avg_delay = mean(dep_delay, na.rm = TRUE)) %>%
filter(avg_delay == max(avg_delay)) %>%
select(dest)
group_by(flights, dest) %>%
summarise(avg_delay = mean(dep_delay, na.rm = TRUE))
group_by(flights, dest) %>%
summarise(avg_delay = mean(dep_delay, na.rm = TRUE)) %>%
filter(avg_delay = max(avg_delay))
group_by(flights, dest) %>%
summarise(avg_delay == mean(dep_delay, na.rm = TRUE)) %>%
filter(avg_delay == max(avg_delay))
group_by(flights, dest) %>%
summarise(avg_delay = mean(dep_delay, na.rm = TRUE))
# To which destinations were the average arrival delays the highest?
# Hint: you'll have to perform a grouping operation then summarize your data
# You can use the `head()` function to view just the first few rows
new <- group_by(flights, dest) %>%
summarise(avg_delay = mean(dep_delay, na.rm = TRUE)) %>%
filter(avg_delay == max(avg_delay)) %>%
select(dest)
# To which destinations were the average arrival delays the highest?
# Hint: you'll have to perform a grouping operation then summarize your data
# You can use the `head()` function to view just the first few rows
new <- group_by(flights, dest) %>%
summarise(avg_delay = mean(dep_delay, na.rm = TRUE)) %>%
filter(avg_delay == max(avg_delay)) %>%
select(dest)
View(new)
# To which destinations were the average arrival delays the highest?
# Hint: you'll have to perform a grouping operation then summarize your data
# You can use the `head()` function to view just the first few rows
new <- group_by(flights, dest) %>%
summarise(avg_delay = mean(dep_delay, na.rm = TRUE)) %>%
#filter(avg_delay == max(avg_delay)) %>%
select(dest)
# To which destinations were the average arrival delays the highest?
# Hint: you'll have to perform a grouping operation then summarize your data
# You can use the `head()` function to view just the first few rows
new <- group_by(flights, dest) %>%
summarise(avg_delay = mean(dep_delay, na.rm = TRUE)) %>%
View(new)
# To which destinations were the average arrival delays the highest?
# Hint: you'll have to perform a grouping operation then summarize your data
# You can use the `head()` function to view just the first few rows
new <- group_by(flights, dest) %>%
summarise(avg_delay = mean(dep_delay, na.rm = TRUE)) %>%
# To which destinations were the average arrival delays the highest?
# Hint: you'll have to perform a grouping operation then summarize your data
# You can use the `head()` function to view just the first few rows
new <- group_by(flights, dest) %>%
summarise(avg_delay = mean(dep_delay, na.rm = TRUE))
# To which destinations were the average arrival delays the highest?
# Hint: you'll have to perform a grouping operation then summarize your data
# You can use the `head()` function to view just the first few rows
new <- group_by(flights, dest) %>%
summarise(avg_delay = mean(dep_delay, na.rm = TRUE)) #%>%
View(new)
# To which destinations were the average arrival delays the highest?
# Hint: you'll have to perform a grouping operation then summarize your data
# You can use the `head()` function to view just the first few rows
arr_highest <- group_by(flights, dest) %>%
summarise(avg_delay = mean(dep_delay, na.rm = TRUE)) #%>%
# To which destinations were the average arrival delays the highest?
# Hint: you'll have to perform a grouping operation then summarize your data
# You can use the `head()` function to view just the first few rows
arr_highest <- group_by(flights, dest) %>%
summarise(avg_delay = mean(dep_delay, na.rm = TRUE)) #%>%
View(arr_highest)
# To which destinations were the average arrival delays the highest?
# Hint: you'll have to perform a grouping operation then summarize your data
# You can use the `head()` function to view just the first few rows
arr_highest <- group_by(flights, dest) %>%
summarise(avg_delay = mean(dep_delay, na.rm = TRUE)) %>%
filter(avg_delay < 10)
View(arr_highest)
# To which destinations were the average arrival delays the highest?
# Hint: you'll have to perform a grouping operation then summarize your data
# You can use the `head()` function to view just the first few rows
arr_highest <- group_by(flights, dest) %>%
summarise(avg_delay = mean(dep_delay, na.rm = TRUE)) %>%
filter(avg_delay == max(avg_delay, na.rm = TRUE))
View(arr_highest)
# To which destinations were the average arrival delays the highest?
# Hint: you'll have to perform a grouping operation then summarize your data
# You can use the `head()` function to view just the first few rows
arr_highest <- group_by(flights, dest) %>%
summarise(avg_delay = mean(dep_delay, na.rm = TRUE)) %>%
filter(avg_delay == max(avg_delay, na.rm = TRUE))
View(arr_highest)
# To which destinations were the average arrival delays the highest?
# Hint: you'll have to perform a grouping operation then summarize your data
# You can use the `head()` function to view just the first few rows
group_by(flights, dest) %>%
summarise(avg_delay = mean(dep_delay, na.rm = TRUE)) %>%
filter(avg_delay == max(avg_delay, na.rm = TRUE)) %>%
select(dest)
# Which city was flown to with the highest average speed?
flights %>%
group_by(dest) %>%
mutate(speed = distance / (air_time/60)) %>%
summarise(avg_speed = mean(speed, na.rm = TRUE)) %>%
filter(avg_speed == max(avg_speed, na.rm)) %>%
select(dest)
# Which city was flown to with the highest average speed?
flights %>%
group_by(dest) %>%
mutate(speed = distance / (air_time/60)) %>%
summarise(avg_speed = mean(speed, na.rm = TRUE)) %>%
filter(avg_speed == max(avg_speed, na.rm = TRUE)) %>%
select(dest)
flights %>%
mutate(speed = distance/air_time * 60) %>%
group_by(dest) %>%
summarise(avg_speed = mean(speed, na.rm = TRUE)) %>%
filter(avg_speed == max(avg_speed, na.rm = TRUE))
# Load the httr and jsonlite libraries for accessing data
# You can also load `dplyr` if you wish to use it
library(httr)
library(jsonlite)
library(dplyr)
library(dplyr)
library(dplyr)
library(dplyr)
library(dplyr)
library(dplyr)
# Create a variable for the API's base URI (https://api.github.com)
base_uri <- "https://api.github.com"
# Under the "Repositories" category of the API,
# find the endpoint that will list repos in an organization. Then,
# Create a variable `resource` that stores the endpoint for the "info201"
# organization repos (this is the PATH to the resource of interest).
# (FYI: this is where we keep the book code and master exercise sets!)
resource <- "/orgs/info201/repos"
# Send a GET request to this endpoint (the `base_uri`` followed by `resource`)
body <- content(response, "text")
# Extract the "text" of the response usin the `content` function
body <- GET(paste0(base_uri, resource))
# Convert the body from JSON into a data frame
info_repos <- fromJSON(body)
# Load the httr and jsonlite libraries for accessing data
# You can also load `dplyr` if you wish to use it
library(httr)
library(jsonlite)
library(dplyr)
# Create a variable for the API's base URI (https://api.github.com)
base_uri <- "https://api.github.com"
# Under the "Repositories" category of the API,
# find the endpoint that will list repos in an organization. Then,
# Create a variable `resource` that stores the endpoint for the "info201"
# organization repos (this is the PATH to the resource of interest).
# (FYI: this is where we keep the book code and master exercise sets!)
resource <- "/orgs/info201/repos"
# Send a GET request to this endpoint (the `base_uri`` followed by `resource`)
body <- content(response, "text")
# Extract the "text" of the response usin the `content` function
body <- GET(paste0(base_uri, resource))
# Convert the body from JSON into a data frame
info_repos <- fromJSON(body)
# How many (public) repositories does the organization have?
print(nrow(info_repos))
# Send a GET request to this endpoint (the `base_uri`` followed by `resource`)
body <- content(response, "text")
base
base.uri <- "https://api.github.com"
resource <- paste0("/users/", "mkfreeman", "/repos")
query.params <- list(sort = "full_name")
response <- GET(uri.full, query = query.params)
library(httr)
library(jsonlite)
library(dplyr)
base.uri <- "https://api.github.com"
resource <- paste0("/users/", "mkfreeman", "/repos")
query.params <- list(sort = "full_name")
response <- GET(uri.full, query = query.params)
library(httr)
response <- GET(uri.full, query = query.params)
base.uri <- "https://api.github.com"
resource <- paste0("/users/", "mkfreeman", "/repos", "?sort=full_name")
uri_full <- paste0(base.uri, resource)
query.params <- list(sort = "full_name")
response <- GET(uri.full, query = query.params)
uri_full <- paste0(base.uri, resource)
response <- GET(uri.full, query = query.params)
uri.full <- paste0(base.uri, resource)
response
response <- GET(uri.full, query = query.params)
response
query.params <-
response <- GET(uri.full, query = list(sort = "full_name", a = "b"))
response_content <- content(response, type = "text")
response_content
resource <- "search/repositories"
resource <- "search/repositories"
uri.full <- paste0(base.uri, resource)
uri.full
resource <- "/search/repositories"
uri.full <- paste0(base.uri, resource)
uri.full
uri.full <- paste0(base.uri, resource)
query.params <- list(q = "dplyr")
response <- GET(uri.full, query = query.params)
uri.full <- paste0(base.uri, resource)
uri.full <- paste0(base.uri, resource)
resource <- "/search/repositories"
uri.full <- paste0(base.uri, resource)
query_params <- list(q = "dplyr")
response <- GET(uri.full, query = query_params)
response
resource <- "/search/repositories"
uri.full <- paste0(base.uri, resource)
query_params <- list(q = "dplyr")
response <- GET(uri.full, query = query_params)
library(jsonlite)
response_content <- content(repsonse, type = "text")
body_data <- fromJSON(response_content)
query.params <-
response <- GET(uri.full, query = list(sort = "full_name", a = "b"))
library(jsonlite)
response_content <- content(repsonse, type = "text")
library(jsonlite)
response_content <- content(response, type = "text")
body_data <- fromJSON(response_content)
body_data
is.data.frame(body_data)
string(body_data)
str(body_data)
names(body_data)
body_data$total_count
library(jsonlite)
response_content <- content(response, type = "text")
body_data <- fromJSON(response_content)
response_content
response <- GET(uri.full, query = query_params)
library(jsonlite)
response_content <- content(response, type = "text")
body_data <- fromJSON(response_content)
body_data
base.uri <- "https://api.github.com"
resource <- paste0("/users/", user, "/repos")
source('~/.active-rstudio-document', echo=TRUE)
View(body_data$item)
dim(body_data$items)
item %>%
flattern() %>%
filter(forks == max(forks)) %>%
select(full_name)
items %>%
flattern() %>%
filter(forks == max(forks)) %>%
select(full_name)
items <- body_data$items
items %>%
flattern() %>%
filter(forks == max(forks)) %>%
select(full_name)
items %>%
flatten() %>%
filter(forks == max(forks)) %>%
select(full_name)
# Create a variable for the API's base URI (https://api.github.com)
base_uri <- "https://api.github.com"
# Under the "Repositories" category of the API,
# find the endpoint that will list repos in an organization. Then,
# Create a variable `resource` that stores the endpoint for the "info201"
# organization repos (this is the PATH to the resource of interest).
# (FYI: this is where we keep the book code and master exercise sets!)
resource <- "/orgs/info201/repos"
# Send a GET request to this endpoint (the `base_uri`` followed by `resource`)
body <- content(response, "text")
response <- GET(paste0(base_uri, resource))
# Send a GET request to this endpoint (the `base_uri`` followed by `resource`)
body <- content(response, "text")
# Extract the "text" of the response usin the `content` function
body <- GET(paste0(base_uri, resource))
# Convert the body from JSON into a data frame
info_repos <- fromJSON(body)
# Send a GET request to this endpoint (the `base_uri`` followed by `resource`)
body <- content(response, "text")
# Convert the body from JSON into a data frame
info_repos <- fromJSON(body)
View(info_repos)
setwd("C:/Users/binca/Desktop/ch11-apis/exercise-2")
setwd("C:/Users/binca/Desktop/ch11-apis/exercise-2")
# Use `source()` to load your API key variable from the `apikey.R` file you made.
# Make sure you've set your working directory!
source(apikey.R)
setwd("C:/Users/binca/Desktop/ch11-apis/exercise-2")
# load relevant libraries
library(httr)
library(jsonlite)
# Use `source()` to load your API key variable from the `apikey.R` file you made.
# Make sure you've set your working directory!
source(apikey.R)
